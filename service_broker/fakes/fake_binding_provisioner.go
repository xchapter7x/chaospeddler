// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/brokerapi"
	"github.com/xchapter7x/chaospeddler/service_broker"
)

type FakeBindingProvisioner struct {
	SetInstanceIDStub        func(string)
	setInstanceIDMutex       sync.RWMutex
	setInstanceIDArgsForCall []struct {
		arg1 string
	}
	SetBindingIDStub        func(string)
	setBindingIDMutex       sync.RWMutex
	setBindingIDArgsForCall []struct {
		arg1 string
	}
	SetBindDetailsStub        func(brokerapi.BindDetails)
	setBindDetailsMutex       sync.RWMutex
	setBindDetailsArgsForCall []struct {
		arg1 brokerapi.BindDetails
	}
	SetActiveStub        func(bool)
	setActiveMutex       sync.RWMutex
	setActiveArgsForCall []struct {
		arg1 bool
	}
}

func (fake *FakeBindingProvisioner) SetInstanceID(arg1 string) {
	fake.setInstanceIDMutex.Lock()
	fake.setInstanceIDArgsForCall = append(fake.setInstanceIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setInstanceIDMutex.Unlock()
	if fake.SetInstanceIDStub != nil {
		fake.SetInstanceIDStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetInstanceIDCallCount() int {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return len(fake.setInstanceIDArgsForCall)
}

func (fake *FakeBindingProvisioner) SetInstanceIDArgsForCall(i int) string {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return fake.setInstanceIDArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetBindingID(arg1 string) {
	fake.setBindingIDMutex.Lock()
	fake.setBindingIDArgsForCall = append(fake.setBindingIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setBindingIDMutex.Unlock()
	if fake.SetBindingIDStub != nil {
		fake.SetBindingIDStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetBindingIDCallCount() int {
	fake.setBindingIDMutex.RLock()
	defer fake.setBindingIDMutex.RUnlock()
	return len(fake.setBindingIDArgsForCall)
}

func (fake *FakeBindingProvisioner) SetBindingIDArgsForCall(i int) string {
	fake.setBindingIDMutex.RLock()
	defer fake.setBindingIDMutex.RUnlock()
	return fake.setBindingIDArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetBindDetails(arg1 brokerapi.BindDetails) {
	fake.setBindDetailsMutex.Lock()
	fake.setBindDetailsArgsForCall = append(fake.setBindDetailsArgsForCall, struct {
		arg1 brokerapi.BindDetails
	}{arg1})
	fake.setBindDetailsMutex.Unlock()
	if fake.SetBindDetailsStub != nil {
		fake.SetBindDetailsStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetBindDetailsCallCount() int {
	fake.setBindDetailsMutex.RLock()
	defer fake.setBindDetailsMutex.RUnlock()
	return len(fake.setBindDetailsArgsForCall)
}

func (fake *FakeBindingProvisioner) SetBindDetailsArgsForCall(i int) brokerapi.BindDetails {
	fake.setBindDetailsMutex.RLock()
	defer fake.setBindDetailsMutex.RUnlock()
	return fake.setBindDetailsArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetActive(arg1 bool) {
	fake.setActiveMutex.Lock()
	fake.setActiveArgsForCall = append(fake.setActiveArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.setActiveMutex.Unlock()
	if fake.SetActiveStub != nil {
		fake.SetActiveStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetActiveCallCount() int {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return len(fake.setActiveArgsForCall)
}

func (fake *FakeBindingProvisioner) SetActiveArgsForCall(i int) bool {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return fake.setActiveArgsForCall[i].arg1
}

var _ chaospeddler.BindingProvisioner = new(FakeBindingProvisioner)
