// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/pivotal-cf/brokerapi"
	"github.com/xchapter7x/chaospeddler/service_broker"
)

type FakeInstanceProvisioner struct {
	SetInstanceIDStub        func(string)
	setInstanceIDMutex       sync.RWMutex
	setInstanceIDArgsForCall []struct {
		arg1 string
	}
	SetProvisionDetailsStub        func(brokerapi.ProvisionDetails)
	setProvisionDetailsMutex       sync.RWMutex
	setProvisionDetailsArgsForCall []struct {
		arg1 brokerapi.ProvisionDetails
	}
	SetActiveStub        func(bool)
	setActiveMutex       sync.RWMutex
	setActiveArgsForCall []struct {
		arg1 bool
	}
}

func (fake *FakeInstanceProvisioner) SetInstanceID(arg1 string) {
	fake.setInstanceIDMutex.Lock()
	fake.setInstanceIDArgsForCall = append(fake.setInstanceIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setInstanceIDMutex.Unlock()
	if fake.SetInstanceIDStub != nil {
		fake.SetInstanceIDStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetInstanceIDCallCount() int {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return len(fake.setInstanceIDArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetInstanceIDArgsForCall(i int) string {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return fake.setInstanceIDArgsForCall[i].arg1
}

func (fake *FakeInstanceProvisioner) SetProvisionDetails(arg1 brokerapi.ProvisionDetails) {
	fake.setProvisionDetailsMutex.Lock()
	fake.setProvisionDetailsArgsForCall = append(fake.setProvisionDetailsArgsForCall, struct {
		arg1 brokerapi.ProvisionDetails
	}{arg1})
	fake.setProvisionDetailsMutex.Unlock()
	if fake.SetProvisionDetailsStub != nil {
		fake.SetProvisionDetailsStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetProvisionDetailsCallCount() int {
	fake.setProvisionDetailsMutex.RLock()
	defer fake.setProvisionDetailsMutex.RUnlock()
	return len(fake.setProvisionDetailsArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetProvisionDetailsArgsForCall(i int) brokerapi.ProvisionDetails {
	fake.setProvisionDetailsMutex.RLock()
	defer fake.setProvisionDetailsMutex.RUnlock()
	return fake.setProvisionDetailsArgsForCall[i].arg1
}

func (fake *FakeInstanceProvisioner) SetActive(arg1 bool) {
	fake.setActiveMutex.Lock()
	fake.setActiveArgsForCall = append(fake.setActiveArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.setActiveMutex.Unlock()
	if fake.SetActiveStub != nil {
		fake.SetActiveStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetActiveCallCount() int {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return len(fake.setActiveArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetActiveArgsForCall(i int) bool {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return fake.setActiveArgsForCall[i].arg1
}

var _ chaospeddler.InstanceProvisioner = new(FakeInstanceProvisioner)
