// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/xchapter7x/chaospeddler/service_broker"
)

type FakeOrchestrator struct {
	DBStub        func() chaospeddler.GormDB
	dBMutex       sync.RWMutex
	dBArgsForCall []struct{}
	dBReturns     struct {
		result1 chaospeddler.GormDB
	}
	StartStub        func()
	startMutex       sync.RWMutex
	startArgsForCall []struct{}
}

func (fake *FakeOrchestrator) DB() chaospeddler.GormDB {
	fake.dBMutex.Lock()
	fake.dBArgsForCall = append(fake.dBArgsForCall, struct{}{})
	fake.dBMutex.Unlock()
	if fake.DBStub != nil {
		return fake.DBStub()
	} else {
		return fake.dBReturns.result1
	}
}

func (fake *FakeOrchestrator) DBCallCount() int {
	fake.dBMutex.RLock()
	defer fake.dBMutex.RUnlock()
	return len(fake.dBArgsForCall)
}

func (fake *FakeOrchestrator) DBReturns(result1 chaospeddler.GormDB) {
	fake.DBStub = nil
	fake.dBReturns = struct {
		result1 chaospeddler.GormDB
	}{result1}
}

func (fake *FakeOrchestrator) Start() {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct{}{})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		fake.StartStub()
	}
}

func (fake *FakeOrchestrator) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

var _ chaospeddler.Orchestrator = new(FakeOrchestrator)
