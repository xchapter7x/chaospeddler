// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/pivotal-cf/brokerapi"
	"github.com/xchapter7x/chaospeddler/service_broker"
)

type FakeInstanceProvisioner struct {
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
	FindOneStub        func(queryDoc interface{}, doc interface{}) (err error)
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		queryDoc interface{}
		doc      interface{}
	}
	findOneReturns struct {
		result1 error
	}
	ReloadDocStub        func(doc interface{})
	reloadDocMutex       sync.RWMutex
	reloadDocArgsForCall []struct {
		doc interface{}
	}
	SetInstanceIDStub        func(string)
	setInstanceIDMutex       sync.RWMutex
	setInstanceIDArgsForCall []struct {
		arg1 string
	}
	SetProvisionDetailsStub        func(brokerapi.ProvisionDetails)
	setProvisionDetailsMutex       sync.RWMutex
	setProvisionDetailsArgsForCall []struct {
		arg1 brokerapi.ProvisionDetails
	}
	SetActiveStub        func(bool)
	setActiveMutex       sync.RWMutex
	setActiveArgsForCall []struct {
		arg1 bool
	}
}

func (fake *FakeInstanceProvisioner) Save() error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeInstanceProvisioner) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeInstanceProvisioner) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstanceProvisioner) FindOne(queryDoc interface{}, doc interface{}) (err error) {
	fake.findOneMutex.Lock()
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		queryDoc interface{}
		doc      interface{}
	}{queryDoc, doc})
	fake.findOneMutex.Unlock()
	if fake.FindOneStub != nil {
		return fake.FindOneStub(queryDoc, doc)
	} else {
		return fake.findOneReturns.result1
	}
}

func (fake *FakeInstanceProvisioner) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeInstanceProvisioner) FindOneArgsForCall(i int) (interface{}, interface{}) {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return fake.findOneArgsForCall[i].queryDoc, fake.findOneArgsForCall[i].doc
}

func (fake *FakeInstanceProvisioner) FindOneReturns(result1 error) {
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeInstanceProvisioner) ReloadDoc(doc interface{}) {
	fake.reloadDocMutex.Lock()
	fake.reloadDocArgsForCall = append(fake.reloadDocArgsForCall, struct {
		doc interface{}
	}{doc})
	fake.reloadDocMutex.Unlock()
	if fake.ReloadDocStub != nil {
		fake.ReloadDocStub(doc)
	}
}

func (fake *FakeInstanceProvisioner) ReloadDocCallCount() int {
	fake.reloadDocMutex.RLock()
	defer fake.reloadDocMutex.RUnlock()
	return len(fake.reloadDocArgsForCall)
}

func (fake *FakeInstanceProvisioner) ReloadDocArgsForCall(i int) interface{} {
	fake.reloadDocMutex.RLock()
	defer fake.reloadDocMutex.RUnlock()
	return fake.reloadDocArgsForCall[i].doc
}

func (fake *FakeInstanceProvisioner) SetInstanceID(arg1 string) {
	fake.setInstanceIDMutex.Lock()
	fake.setInstanceIDArgsForCall = append(fake.setInstanceIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setInstanceIDMutex.Unlock()
	if fake.SetInstanceIDStub != nil {
		fake.SetInstanceIDStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetInstanceIDCallCount() int {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return len(fake.setInstanceIDArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetInstanceIDArgsForCall(i int) string {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return fake.setInstanceIDArgsForCall[i].arg1
}

func (fake *FakeInstanceProvisioner) SetProvisionDetails(arg1 brokerapi.ProvisionDetails) {
	fake.setProvisionDetailsMutex.Lock()
	fake.setProvisionDetailsArgsForCall = append(fake.setProvisionDetailsArgsForCall, struct {
		arg1 brokerapi.ProvisionDetails
	}{arg1})
	fake.setProvisionDetailsMutex.Unlock()
	if fake.SetProvisionDetailsStub != nil {
		fake.SetProvisionDetailsStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetProvisionDetailsCallCount() int {
	fake.setProvisionDetailsMutex.RLock()
	defer fake.setProvisionDetailsMutex.RUnlock()
	return len(fake.setProvisionDetailsArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetProvisionDetailsArgsForCall(i int) brokerapi.ProvisionDetails {
	fake.setProvisionDetailsMutex.RLock()
	defer fake.setProvisionDetailsMutex.RUnlock()
	return fake.setProvisionDetailsArgsForCall[i].arg1
}

func (fake *FakeInstanceProvisioner) SetActive(arg1 bool) {
	fake.setActiveMutex.Lock()
	fake.setActiveArgsForCall = append(fake.setActiveArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.setActiveMutex.Unlock()
	if fake.SetActiveStub != nil {
		fake.SetActiveStub(arg1)
	}
}

func (fake *FakeInstanceProvisioner) SetActiveCallCount() int {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return len(fake.setActiveArgsForCall)
}

func (fake *FakeInstanceProvisioner) SetActiveArgsForCall(i int) bool {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return fake.setActiveArgsForCall[i].arg1
}

var _ chaospeddler.InstanceProvisioner = new(FakeInstanceProvisioner)
