// This file was generated by counterfeiter
package fake

import (
	"sync"

	"github.com/pivotal-cf/brokerapi"
	"github.com/xchapter7x/chaospeddler/service_broker"
)

type FakeBindingProvisioner struct {
	SaveStub        func() error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct{}
	saveReturns     struct {
		result1 error
	}
	FindOneStub        func(queryDoc interface{}, doc interface{}) (err error)
	findOneMutex       sync.RWMutex
	findOneArgsForCall []struct {
		queryDoc interface{}
		doc      interface{}
	}
	findOneReturns struct {
		result1 error
	}
	ReloadDocStub        func(doc interface{})
	reloadDocMutex       sync.RWMutex
	reloadDocArgsForCall []struct {
		doc interface{}
	}
	SetInstanceIDStub        func(string)
	setInstanceIDMutex       sync.RWMutex
	setInstanceIDArgsForCall []struct {
		arg1 string
	}
	SetBindingIDStub        func(string)
	setBindingIDMutex       sync.RWMutex
	setBindingIDArgsForCall []struct {
		arg1 string
	}
	SetBindDetailsStub        func(brokerapi.BindDetails)
	setBindDetailsMutex       sync.RWMutex
	setBindDetailsArgsForCall []struct {
		arg1 brokerapi.BindDetails
	}
	SetActiveStub        func(bool)
	setActiveMutex       sync.RWMutex
	setActiveArgsForCall []struct {
		arg1 bool
	}
	FindAllMatchesStub        func() ([]chaospeddler.ServiceBinding, error)
	findAllMatchesMutex       sync.RWMutex
	findAllMatchesArgsForCall []struct{}
	findAllMatchesReturns     struct {
		result1 []chaospeddler.ServiceBinding
		result2 error
	}
}

func (fake *FakeBindingProvisioner) Save() error {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct{}{})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub()
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeBindingProvisioner) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeBindingProvisioner) SaveReturns(result1 error) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBindingProvisioner) FindOne(queryDoc interface{}, doc interface{}) (err error) {
	fake.findOneMutex.Lock()
	fake.findOneArgsForCall = append(fake.findOneArgsForCall, struct {
		queryDoc interface{}
		doc      interface{}
	}{queryDoc, doc})
	fake.findOneMutex.Unlock()
	if fake.FindOneStub != nil {
		return fake.FindOneStub(queryDoc, doc)
	} else {
		return fake.findOneReturns.result1
	}
}

func (fake *FakeBindingProvisioner) FindOneCallCount() int {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return len(fake.findOneArgsForCall)
}

func (fake *FakeBindingProvisioner) FindOneArgsForCall(i int) (interface{}, interface{}) {
	fake.findOneMutex.RLock()
	defer fake.findOneMutex.RUnlock()
	return fake.findOneArgsForCall[i].queryDoc, fake.findOneArgsForCall[i].doc
}

func (fake *FakeBindingProvisioner) FindOneReturns(result1 error) {
	fake.FindOneStub = nil
	fake.findOneReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBindingProvisioner) ReloadDoc(doc interface{}) {
	fake.reloadDocMutex.Lock()
	fake.reloadDocArgsForCall = append(fake.reloadDocArgsForCall, struct {
		doc interface{}
	}{doc})
	fake.reloadDocMutex.Unlock()
	if fake.ReloadDocStub != nil {
		fake.ReloadDocStub(doc)
	}
}

func (fake *FakeBindingProvisioner) ReloadDocCallCount() int {
	fake.reloadDocMutex.RLock()
	defer fake.reloadDocMutex.RUnlock()
	return len(fake.reloadDocArgsForCall)
}

func (fake *FakeBindingProvisioner) ReloadDocArgsForCall(i int) interface{} {
	fake.reloadDocMutex.RLock()
	defer fake.reloadDocMutex.RUnlock()
	return fake.reloadDocArgsForCall[i].doc
}

func (fake *FakeBindingProvisioner) SetInstanceID(arg1 string) {
	fake.setInstanceIDMutex.Lock()
	fake.setInstanceIDArgsForCall = append(fake.setInstanceIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setInstanceIDMutex.Unlock()
	if fake.SetInstanceIDStub != nil {
		fake.SetInstanceIDStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetInstanceIDCallCount() int {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return len(fake.setInstanceIDArgsForCall)
}

func (fake *FakeBindingProvisioner) SetInstanceIDArgsForCall(i int) string {
	fake.setInstanceIDMutex.RLock()
	defer fake.setInstanceIDMutex.RUnlock()
	return fake.setInstanceIDArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetBindingID(arg1 string) {
	fake.setBindingIDMutex.Lock()
	fake.setBindingIDArgsForCall = append(fake.setBindingIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.setBindingIDMutex.Unlock()
	if fake.SetBindingIDStub != nil {
		fake.SetBindingIDStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetBindingIDCallCount() int {
	fake.setBindingIDMutex.RLock()
	defer fake.setBindingIDMutex.RUnlock()
	return len(fake.setBindingIDArgsForCall)
}

func (fake *FakeBindingProvisioner) SetBindingIDArgsForCall(i int) string {
	fake.setBindingIDMutex.RLock()
	defer fake.setBindingIDMutex.RUnlock()
	return fake.setBindingIDArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetBindDetails(arg1 brokerapi.BindDetails) {
	fake.setBindDetailsMutex.Lock()
	fake.setBindDetailsArgsForCall = append(fake.setBindDetailsArgsForCall, struct {
		arg1 brokerapi.BindDetails
	}{arg1})
	fake.setBindDetailsMutex.Unlock()
	if fake.SetBindDetailsStub != nil {
		fake.SetBindDetailsStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetBindDetailsCallCount() int {
	fake.setBindDetailsMutex.RLock()
	defer fake.setBindDetailsMutex.RUnlock()
	return len(fake.setBindDetailsArgsForCall)
}

func (fake *FakeBindingProvisioner) SetBindDetailsArgsForCall(i int) brokerapi.BindDetails {
	fake.setBindDetailsMutex.RLock()
	defer fake.setBindDetailsMutex.RUnlock()
	return fake.setBindDetailsArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) SetActive(arg1 bool) {
	fake.setActiveMutex.Lock()
	fake.setActiveArgsForCall = append(fake.setActiveArgsForCall, struct {
		arg1 bool
	}{arg1})
	fake.setActiveMutex.Unlock()
	if fake.SetActiveStub != nil {
		fake.SetActiveStub(arg1)
	}
}

func (fake *FakeBindingProvisioner) SetActiveCallCount() int {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return len(fake.setActiveArgsForCall)
}

func (fake *FakeBindingProvisioner) SetActiveArgsForCall(i int) bool {
	fake.setActiveMutex.RLock()
	defer fake.setActiveMutex.RUnlock()
	return fake.setActiveArgsForCall[i].arg1
}

func (fake *FakeBindingProvisioner) FindAllMatches() ([]chaospeddler.ServiceBinding, error) {
	fake.findAllMatchesMutex.Lock()
	fake.findAllMatchesArgsForCall = append(fake.findAllMatchesArgsForCall, struct{}{})
	fake.findAllMatchesMutex.Unlock()
	if fake.FindAllMatchesStub != nil {
		return fake.FindAllMatchesStub()
	} else {
		return fake.findAllMatchesReturns.result1, fake.findAllMatchesReturns.result2
	}
}

func (fake *FakeBindingProvisioner) FindAllMatchesCallCount() int {
	fake.findAllMatchesMutex.RLock()
	defer fake.findAllMatchesMutex.RUnlock()
	return len(fake.findAllMatchesArgsForCall)
}

func (fake *FakeBindingProvisioner) FindAllMatchesReturns(result1 []chaospeddler.ServiceBinding, result2 error) {
	fake.FindAllMatchesStub = nil
	fake.findAllMatchesReturns = struct {
		result1 []chaospeddler.ServiceBinding
		result2 error
	}{result1, result2}
}

var _ chaospeddler.BindingProvisioner = new(FakeBindingProvisioner)
